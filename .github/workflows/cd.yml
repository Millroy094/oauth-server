name: Deploy OAuth Server
on:
  workflow_dispatch:
  workflow_run:
    workflows: ['Build OAuth Server Artefact']
    types: ['completed']
jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Setup Open Tofu
        uses: opentofu/setup-opentofu@v1
      - name: Provision oauth server eks cluster
        working-directory: "./infra"
        run: |
          tofu init --backend-config="bucket=${{vars.AWS_TERRAFORM_STATE_BUCKET_NAME}}" --backend-config="key=${{vars.AWS_TERRAFORM_STATE_KEY}}.tfstate"
          tofu apply -auto-approve
        env:
          TF_VAR_aws_access_key: "${{secrets.AWS_ACCESS_KEY_ID}}"
          TF_VAR_aws_secret_key: "${{secrets.AWS_SECRET_ACCESS_KEY}}"
      - name: Install AWS CLI and kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
          sudo curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Generate KUBECONFIG for EKS
        run: |
          aws eks update-kubeconfig --name oauth-server-cluster --region eu-west-2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Helm Deploy OAuth Server
        run: |
          helm upgrade --install oauth-server ./helm \
            --set GitHub.Container.Image=${{ github.event.repository.name }} \
            --set GitHub.Container.Tag=latest \
            --set ImageCredentials.Registry=ghcr.io \
            --set ImageCredentials.Username=${{ github.actor }} \
            --set ImageCredentials.Email=${{ github.event.pusher.email }} \
            --set ImageCredentials.Password=${{ secrets.GHCR_K8_PASSWORD }} \
            --set Server.Authentication.Issuer=${{ env.AUTH_ISSUER }} \
            --set Server.Email.Service=${{ env.EMAIL_SERVICE }} \
            --set Server.Email.EmailAddress=${{ env.EMAIL_SERVICE_SENDER_ADDRESS }} \
            --set Server.Authentication.AccessTokenSecret=${{ secrets.ACCESS_TOKEN_SECRET }} \ 
            --set Server.Authentication.RefreshTokenSecret=${{ secrets.REFRESH_TOKEN_SECRET }} \
            --set Server.Encryption.Secret=${{ secrets.GITHUB_TOKENENCRYPTION_SECRET }} \
            --set Server.Encryption.SecretIV=${{ secrets.ENCRYPTION_SECRET_IV }} \
            --set Server.Email.EmailPassword='${{ secrets.EMAIL_SERVICE_PASSWORD }}' \
            --set 'Server.CookieSecrets={${{ secrets.COOKIE_SECRETS }}}'
